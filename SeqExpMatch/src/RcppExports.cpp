// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fill_i_b_with_matches_loop_cpp
void fill_i_b_with_matches_loop_cpp(IntegerVector& i_b, const IntegerVector& match_indic, const IntegerVector& ms_b, int i_b_idx);
RcppExport SEXP _SeqExpMatch_fill_i_b_with_matches_loop_cpp(SEXP i_bSEXP, SEXP match_indicSEXP, SEXP ms_bSEXP, SEXP i_b_idxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type i_b(i_bSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type match_indic(match_indicSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ms_b(ms_bSEXP);
    Rcpp::traits::input_parameter< int >::type i_b_idx(i_b_idxSEXP);
    fill_i_b_with_matches_loop_cpp(i_b, match_indic, ms_b, i_b_idx);
    return R_NilValue;
END_RCPP
}
// eigen_compute_single_entry_on_diagonal_of_inverse_matrix_cpp
double eigen_compute_single_entry_on_diagonal_of_inverse_matrix_cpp(Eigen::MatrixXd M, int j);
RcppExport SEXP _SeqExpMatch_eigen_compute_single_entry_on_diagonal_of_inverse_matrix_cpp(SEXP MSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_compute_single_entry_on_diagonal_of_inverse_matrix_cpp(M, j));
    return rcpp_result_gen;
END_RCPP
}
// eigen_Xt_times_diag_w_times_X_cpp
Eigen::MatrixXd eigen_Xt_times_diag_w_times_X_cpp(Eigen::Map<Eigen::MatrixXd> X, Eigen::Map<Eigen::VectorXd> w);
RcppExport SEXP _SeqExpMatch_eigen_Xt_times_diag_w_times_X_cpp(SEXP XSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_Xt_times_diag_w_times_X_cpp(X, w));
    return rcpp_result_gen;
END_RCPP
}
// fast_ols_cpp
List fast_ols_cpp(const Eigen::MatrixXd& X, const Eigen::VectorXd& y);
RcppExport SEXP _SeqExpMatch_fast_ols_cpp(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fast_ols_cpp(X, y));
    return rcpp_result_gen;
END_RCPP
}
// compute_proportional_mahal_distances_cpp
Eigen::VectorXd compute_proportional_mahal_distances_cpp(const Eigen::VectorXd& xt_prev, const Eigen::MatrixXd& X_prev, const Eigen::VectorXi& reservoir_indices, const Eigen::MatrixXd& S_xs_inv);
RcppExport SEXP _SeqExpMatch_compute_proportional_mahal_distances_cpp(SEXP xt_prevSEXP, SEXP X_prevSEXP, SEXP reservoir_indicesSEXP, SEXP S_xs_invSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type xt_prev(xt_prevSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X_prev(X_prevSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type reservoir_indices(reservoir_indicesSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type S_xs_inv(S_xs_invSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_proportional_mahal_distances_cpp(xt_prev, X_prev, reservoir_indices, S_xs_inv));
    return rcpp_result_gen;
END_RCPP
}
// compute_weighted_sqd_distances_cpp
NumericVector compute_weighted_sqd_distances_cpp(NumericVector x_new, NumericMatrix X_all_scaled_col_subset, IntegerVector reservoir_indices, NumericVector covariate_weights);
RcppExport SEXP _SeqExpMatch_compute_weighted_sqd_distances_cpp(SEXP x_newSEXP, SEXP X_all_scaled_col_subsetSEXP, SEXP reservoir_indicesSEXP, SEXP covariate_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_new(x_newSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_all_scaled_col_subset(X_all_scaled_col_subsetSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type reservoir_indices(reservoir_indicesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type covariate_weights(covariate_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_weighted_sqd_distances_cpp(x_new, X_all_scaled_col_subset, reservoir_indices, covariate_weights));
    return rcpp_result_gen;
END_RCPP
}
// matrix_rank_cpp
int matrix_rank_cpp(const Eigen::MatrixXd& A, double tol);
RcppExport SEXP _SeqExpMatch_matrix_rank_cpp(SEXP ASEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_rank_cpp(A, tol));
    return rcpp_result_gen;
END_RCPP
}
// fast_ols_with_var_cpp
List fast_ols_with_var_cpp(const Eigen::MatrixXd& X, const Eigen::VectorXd& y, int j);
RcppExport SEXP _SeqExpMatch_fast_ols_with_var_cpp(SEXP XSEXP, SEXP ySEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_ols_with_var_cpp(X, y, j));
    return rcpp_result_gen;
END_RCPP
}
// sample_int_replace_cpp
IntegerVector sample_int_replace_cpp(int n, int size);
RcppExport SEXP _SeqExpMatch_sample_int_replace_cpp(SEXP nSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_int_replace_cpp(n, size));
    return rcpp_result_gen;
END_RCPP
}
// scale_columns_cpp
Eigen::MatrixXd scale_columns_cpp(const Eigen::MatrixXd& X);
RcppExport SEXP _SeqExpMatch_scale_columns_cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(scale_columns_cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// shuffle_cpp
NumericVector shuffle_cpp(NumericVector w);
RcppExport SEXP _SeqExpMatch_shuffle_cpp(SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(shuffle_cpp(w));
    return rcpp_result_gen;
END_RCPP
}
// compute_bootstrapped_weighted_sqd_distances_cpp
NumericVector compute_bootstrapped_weighted_sqd_distances_cpp(NumericMatrix X_all_scaled_col_subset, NumericVector covariate_weights, int t, int B);
RcppExport SEXP _SeqExpMatch_compute_bootstrapped_weighted_sqd_distances_cpp(SEXP X_all_scaled_col_subsetSEXP, SEXP covariate_weightsSEXP, SEXP tSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X_all_scaled_col_subset(X_all_scaled_col_subsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type covariate_weights(covariate_weightsSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_bootstrapped_weighted_sqd_distances_cpp(X_all_scaled_col_subset, covariate_weights, t, B));
    return rcpp_result_gen;
END_RCPP
}
// which_cols_vary_cpp
LogicalVector which_cols_vary_cpp(NumericMatrix X);
RcppExport SEXP _SeqExpMatch_which_cols_vary_cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(which_cols_vary_cpp(X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SeqExpMatch_fill_i_b_with_matches_loop_cpp", (DL_FUNC) &_SeqExpMatch_fill_i_b_with_matches_loop_cpp, 4},
    {"_SeqExpMatch_eigen_compute_single_entry_on_diagonal_of_inverse_matrix_cpp", (DL_FUNC) &_SeqExpMatch_eigen_compute_single_entry_on_diagonal_of_inverse_matrix_cpp, 2},
    {"_SeqExpMatch_eigen_Xt_times_diag_w_times_X_cpp", (DL_FUNC) &_SeqExpMatch_eigen_Xt_times_diag_w_times_X_cpp, 2},
    {"_SeqExpMatch_fast_ols_cpp", (DL_FUNC) &_SeqExpMatch_fast_ols_cpp, 2},
    {"_SeqExpMatch_compute_proportional_mahal_distances_cpp", (DL_FUNC) &_SeqExpMatch_compute_proportional_mahal_distances_cpp, 4},
    {"_SeqExpMatch_compute_weighted_sqd_distances_cpp", (DL_FUNC) &_SeqExpMatch_compute_weighted_sqd_distances_cpp, 4},
    {"_SeqExpMatch_fast_logistic_regression_cpp", (DL_FUNC) &_SeqExpMatch_fast_logistic_regression_cpp, 6},
    {"_SeqExpMatch_matrix_rank_cpp", (DL_FUNC) &_SeqExpMatch_matrix_rank_cpp, 2},
    {"_SeqExpMatch_fast_ols_with_var_cpp", (DL_FUNC) &_SeqExpMatch_fast_ols_with_var_cpp, 3},
    {"_SeqExpMatch_sample_int_replace_cpp", (DL_FUNC) &_SeqExpMatch_sample_int_replace_cpp, 2},
    {"_SeqExpMatch_scale_columns_cpp", (DL_FUNC) &_SeqExpMatch_scale_columns_cpp, 1},
    {"_SeqExpMatch_shuffle_cpp", (DL_FUNC) &_SeqExpMatch_shuffle_cpp, 1},
    {"_SeqExpMatch_compute_bootstrapped_weighted_sqd_distances_cpp", (DL_FUNC) &_SeqExpMatch_compute_bootstrapped_weighted_sqd_distances_cpp, 4},
    {"_SeqExpMatch_which_cols_vary_cpp", (DL_FUNC) &_SeqExpMatch_which_cols_vary_cpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_SeqExpMatch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
