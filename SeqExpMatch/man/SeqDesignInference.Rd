% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inference.R
\name{SeqDesignInference}
\alias{SeqDesignInference}
\title{Inference for A Sequential Design}
\description{
An R6 Class that estimates, tests and provides intervals for a treatment effect in a sequential design.
This class takes a \code{SeqDesign} object as an input where this object
contains data for a fully completed sequential experiment (i.e. all treatment
assignments were allocated and all responses were collected). Then the user
specifies the type of estimation (mean_difference-or-medians or default_regression) and the type
of sampling assumption (i.e. the superpopulation assumption leading to MLE-or-KM-based inference or 
the finite population assumption implying randomization-exact-based inference) and then can query the
estimate and pval for the test. If the test is normal-theory based it is 
testing the population H_0: beta_T = 0 and if the test is a randomization test, 
it is testing the sharp null that H_0: Y_T_i = Y_C_i for all subjects. Confidence
interval construction is available for normal-theory based test type as well.
}
\examples{

## ------------------------------------------------
## Method `SeqDesignInference$new`
## ------------------------------------------------

seq_des = SeqDesign$new(n = 6, p = 10, design = "CRD")
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[1, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[2, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[3, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[4, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[5, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[6, 2 : 10])
seq_des$add_all_subject_responses(c(4.71, 1.23, 4.78, 6.11, 5.95, 8.43))

seq_des_inf = SeqDesignInference$new(seq_des)
 

## ------------------------------------------------
## Method `SeqDesignInference$compute_treatment_estimate`
## ------------------------------------------------

seq_des = SeqDesign$new(n = 6, p = 10, design = "CRD", response_type = "continuous")
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[1, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[2, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[3, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[4, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[5, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[6, 2 : 10])
seq_des$add_all_subject_responses(c(4.71, 1.23, 4.78, 6.11, 5.95, 8.43))

seq_des_inf = SeqDesignInference$new(seq_des)
seq_des_inf$compute_treatment_estimate()
		

## ------------------------------------------------
## Method `SeqDesignInference$compute_confidence_interval`
## ------------------------------------------------

seq_des = SeqDesign$new(n = 6, p = 10, design = "CRD")
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[1, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[2, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[3, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[4, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[5, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[6, 2 : 10])
seq_des$add_all_subject_responses(c(4.71, 1.23, 4.78, 6.11, 5.95, 8.43))

seq_des_inf = SeqDesignInference$new(seq_des, test_type = "MLE-or-KM-based")
seq_des_inf$compute_confidence_interval()
		

## ------------------------------------------------
## Method `SeqDesignInference$compute_two_sided_pval_for_treatment_effect`
## ------------------------------------------------

seq_des = SeqDesign$new(n = 6, p = 10, design = "CRD")
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[1, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[2, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[3, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[4, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[5, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[6, 2 : 10])
seq_des$add_all_subject_responses(c(4.71, 1.23, 4.78, 6.11, 5.95, 8.43))

seq_des_inf = SeqDesignInference$new(seq_des)
seq_des_inf$compute_two_sided_pval_for_treatment_effect()
		
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{estimate_type}}{The estimate type (see initializer documentation).}

\item{\code{test_type}}{The type of test to run (see initializer documentation).}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SeqDesignInference-new}{\code{SeqDesignInference$new()}}
\item \href{#method-SeqDesignInference-compute_treatment_estimate}{\code{SeqDesignInference$compute_treatment_estimate()}}
\item \href{#method-SeqDesignInference-compute_confidence_interval}{\code{SeqDesignInference$compute_confidence_interval()}}
\item \href{#method-SeqDesignInference-compute_two_sided_pval_for_treatment_effect}{\code{SeqDesignInference$compute_two_sided_pval_for_treatment_effect()}}
\item \href{#method-SeqDesignInference-clone}{\code{SeqDesignInference$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeqDesignInference-new"></a>}}
\if{latex}{\out{\hypertarget{method-SeqDesignInference-new}{}}}
\subsection{Method \code{new()}}{
Initialize a sequential experimental design estimation and test object after the sequential design is completed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeqDesignInference$new(
  seq_des_obj,
  estimate_type = "default_regression",
  test_type = "randomization-exact",
  num_cores = 1,
  verbose = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{seq_des_obj}}{A SeqDesign object whose entire n subjects are assigned and response y is recorded within.}

\item{\code{estimate_type}}{The type of estimate to compute of which there are many and identified by the response type as its first word. If the string "KK" 
  appears after the first word, then it is
    * "continuous_simple_mean_difference"         
      assumes the treatment effect parameter is an additive treatment effect 
      and estimates via the simple average difference
    * "continuous_regression_with_covariates"
      assumes the treatment effect parameter is an additive treatment effect    
      and the presence of linear additive covariates 
      and estimates via OLS 
    * "continuous_KK_compound_mean_difference"     
      assumes the treatment effect parameter is an additive treatment effect    
      and estimates via combining a simple average difference estimator for both the matches and the reservoir
    * "continuous_KK_compound_regression"    
      assumes the treatment effect parameter is an additive treatment effect
      and estimates via combining an OLS estimator for bothe ther matches and the reservoir
    * "continuous_KK_regression_with_covariates_and_matching_dummies"
      assumes the treatment effect parameter is an additive treatment effect 
      and the presence of linear additive covariates treating the match ID as a factor and estimates via OLS (not recommended)    
    * "continuous_KK_regression_with_covariates_and_random_intercepts"    
      assumes the treatment effect parameter is an additive treatment effect 
      and the presence of linear additive covariates and random intercepts on the match ID 
      and estimates via restricted maximum likelihood
    * "incidence_simple_mean_difference"
      assumes the treatment effect parameter is an additive probability difference 
      and estimates via the simple average difference    
    * "incidence_simple_log_odds"
      assumes the treatment effect parameter is additive in the log odds probability of the positive class
      and estimates via maximum likelihood     
    * "incidence_logistic_regression"
      assumes the treatment effect parameter is additive in the log odds probability of the positive class
      and the presence of linear additive covariates also in the log odds probability of the positive class
      and estimates via maximum likelihood
    * "incidence_KK_compound_logistic_regression"    
      assumes the treatment effect parameter is additive in the log odds probability of the positive class
      and the presence of linear additive covariates treating the match ID as a factor also in the log odds probability of the positive class
      and estimates via maximum likelihood
    * "incidence_KK_logistic_regression_and_matching_dummies"    
      assumes the treatment effect parameter is additive in the log odds probability of the positive class
      and the presence of linear additive covariates treating the match ID as a factor also in the log odds probability of the positive class
      and estimates via maximum likelihood
    * "incidence_KK_compound_logistic_regression_and_random_effects"
      assumes the treatment effect parameter is additive in the log odds probability of the positive class
      and the presence of linear additive covariates and random intercepts on the match ID also in the log odds probability of the positive class
      and estimates via restricted maximum likelihood
    * "proportion_simple_mean_difference"    
      assumes the treatment effect parameter is an additive proportion difference 
      and estimates via the simple average difference    
    * "proportion_simple_logodds_regression"    
      assumes the treatment effect parameter is additive in the log odds proportion
      and estimates via beta regression
    * "proportion_beta_regression"
      assumes the treatment effect parameter is additive in the log odds proportion
      and the presence of linear additive covariates 
      and estimates via beta regression 
* "proportion_KK_compound_log_odds"
      assumes the treatment effect parameter is an additive treatment effect in log odds of proportion
      and the presence of linear additive covariates also in the log odds of proportion
      and estimates via combining a simple average difference estimator for both the matches and the reservoir
*    "proportion_KK_compound_beta_regression"
      assumes the treatment effect parameter is an additive treatment effect in log odds    
      and estimates via combining a simple average difference estimator for both the matches and the reservoir
    * "proportion_KK_beta_regression_and_matching_dummies"
      assumes the treatment effect parameter is additive in the log odds proportion
      and the presence of linear additive covariates 
      and estimates via beta regression
    * "count_simple_mean_difference"    
      assumes the treatment effect parameter is an additive mean count difference 
      and estimates via the simple average difference    
    * "count_simple_log_regression"        
      assumes the treatment effect parameter is additive in the log count
      and estimates via negative binomial regression
    * "count_simple_log_regression_with_covariates"    
      assumes the treatment effect parameter is additive in the log count
      and the presence of linear additive covariates 
      and estimates via negative binomial regression
    * "count_KK_simple_mean_difference"    
      assumes the treatment effect parameter is additive in the log count
      and treating the match ID as a factor
      and estimates via maximum likelihood    
    * "count_KK_log_regression_with_covariates_and_matching_dummies"    
      assumes the treatment effect parameter is additive in the log count
      and the presence of linear additive covariates
      and treating the match ID as a factor
      and estimates via maximum likelihood
    * "survival_simple_median_difference"    
      assumes the treatment effect parameter is the difference in survival medians
      and estimates via Kaplan-Meier
    * "survival_log_mean_difference"    
      assumes the treatment effect parameter is the additive mean survival difference
      and estimates via Weibull regression
    * "survival_log_regression_with_covariates"
      assumes the treatment effect parameter is the additive mean survival difference
      and the presence of linear additive covariates
      and estimates via Weibull regression    
    * "survival_KK_log_regression_with_covariates_and_matching_dummies"
      assumes the treatment effect parameter is the additive mean survival difference
      and the presence of linear additive covariates
      and estimates via Weibull regression    
  log odds of probability of positive class between the treatment and control.
  The default is "default_regression" as this provides higher power if you feel comfortable assuming the appropriate glm.}

\item{\code{test_type}}{The type of test to run (either "MLE-or-KM-based" implying your subject entrant sampling 
assumption is from a superpopulation or "randomization-exact" implying a finite sampling
assumption). The default option is "randomization-exact" as it provided properly-sized 
tests in our simulations.}

\item{\code{num_cores}}{The number of CPU cores to use to parallelize the sampling during randomization-based inference 
(which is very slow). The default is 1 for serial computation. This parameter is ignored
for \code{test_type = "MLE-or-KM-based"}.}

\item{\code{verbose}}{A flag indicating whether messages should be displayed to the user. Default is \code{TRUE}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new `SeqDesignTest` object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{seq_des = SeqDesign$new(n = 6, p = 10, design = "CRD")
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[1, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[2, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[3, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[4, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[5, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[6, 2 : 10])
seq_des$add_all_subject_responses(c(4.71, 1.23, 4.78, 6.11, 5.95, 8.43))

seq_des_inf = SeqDesignInference$new(seq_des)
 
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeqDesignInference-compute_treatment_estimate"></a>}}
\if{latex}{\out{\hypertarget{method-SeqDesignInference-compute_treatment_estimate}{}}}
\subsection{Method \code{compute_treatment_estimate()}}{
Computes for estimate type "mean_difference-or-medians" either
(1a) for incidence outcomes, the additive log odds treatment effect using logistic regression
(1b) for survival outcomes, the median difference for suvival using the Kaplan-Meier estimates for both arms 
(1c) for count outcomes, the additive treatment effect on log count using negative binomial regression
(1d) for proportion and continous outcomes (where the latter is not under an equal allocation KK design), 
the classic mean_difference estimate of the additive treatment effect, 
(1e) for continuous outcome, equal allocation to arms and KK designs, there's a special match-reservoir weighted 
classic mean_difference estimate

Computes for estimte type "default_regression" either
(2a) for incidence outcomes, the additive log odds treatment effect using logistic regression controlled for all other covariates
(2b) for survival outcomes, the additive treatment effect on log suvival using Weibull regression controlled for all other covariates
(2c) for count outcomes, the additive treatment effect on log count using negative binomial regression controlled for all other covariates
(2d) for proportion outcome, the additive treatment effect on proportion using beta regression controlled for all other covariates
(2e) for continous outcomes but not under an equal allocation KK design, the additive treatment effect using OLS regression controlled for all other covariates
(2f) for continuous outcome, equal allocation to arms and KK designs, there's a special match-reservoir weighted 
OLS regression controlled for all other covariates
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeqDesignInference$compute_treatment_estimate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The setting-appropriate (see description) numeric estimate of the treatment effect
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{seq_des = SeqDesign$new(n = 6, p = 10, design = "CRD", response_type = "continuous")
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[1, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[2, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[3, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[4, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[5, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[6, 2 : 10])
seq_des$add_all_subject_responses(c(4.71, 1.23, 4.78, 6.11, 5.95, 8.43))

seq_des_inf = SeqDesignInference$new(seq_des)
seq_des_inf$compute_treatment_estimate()
		
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeqDesignInference-compute_confidence_interval"></a>}}
\if{latex}{\out{\hypertarget{method-SeqDesignInference-compute_confidence_interval}{}}}
\subsection{Method \code{compute_confidence_interval()}}{
Computes a 1-alpha level frequentist confidence interval differently for all response types, estimate types and test types.

For "mean_difference" it computes
(1a) for incidence outcomes (ignoring the KK design structure), 
the p-value for the test of the additive log odds treatment effect being zero using logistic regression's MLE normal approximation
(1b) for survival outcomes (ignoring the KK design structure), the median difference for survival using the Kaplan-Meier estimates for both arms 
(1c) for count, proportion and continous outcomes (all ignoring the KK design structure), 
the classic mean_difference estimate of the additive treatment effect, 
(1d) for continuous outcome, equal allocation to arms and KK designs, there's a special match-reservoir weighted 
classic mean_difference estimate

For "medial_difference" it computes only
(2) for survival outcomes (ignoring the KK design structure), the difference of medians of the two arms

Computes for estimte type "default_regression" either
(3a) for incidence outcomes, the additive log odds treatment effect using logistic regression controlled for all other covariates
(3b) for survival outcomes, the additive treatment effect on log suvival using Weibull regression controlled for all other covariates
(3c) for count outcomes, the additive treatment effect on log count using negative binomial regression controlled for all other covariates
(3d) for proportion outcome, the additive treatment effect on proportion using beta regression controlled for all other covariates
(3e) for continous outcomes but not under an equal allocation KK design, the additive treatment effect using OLS regression controlled for all other covariates
(3f) for continuous outcome, equal allocation to arms and KK designs, there's a special match-reservoir weighted 
OLS regression controlled for all other covariates

The confidence interval is computed differently for 
[I] test type "MLE-or-KM-based"
Here we use the theory that MLE's computed for GLM's are asymptotically normal (except in the case 
of estimat_type "median difference" where a nonparametric bootstrap confidence interval (see \link{\code{controlTest::quantileControlTest}})
is employed. Hence these confidence intervals are asymptotically valid and thus approximate for any sample size.

[II] test type "randomization-exact"
Here we invert the randomization test that tests the strong null H_0: y_T_i - y_C_i = delta <=> (y_T_i - delta) - y_C_i = 0 so 
we adjust the treatment responses downward by delta. We then find the set of all delta values that is above 1 - alpha/2 (i.e. two-sided)
This is accomplished via a bisection algorithm (algorithm 1 of Glazer and Stark, 2025 available at
https://arxiv.org/abs/2405.05238). These confidence intervals are exact to within tolerance \code{pval_epsilon}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeqDesignInference$compute_confidence_interval(
  alpha = 0.05,
  nsim_exact_test = 501,
  pval_epsilon = 0.001,
  B = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{alpha}}{The confidence level in the computed confidence interval is 1 - \code{alpha}. The default is 0.05.}

\item{\code{nsim_exact_test}}{The number of randomization vectors (applicable for test type "randomization-exact" only). 
The default is 1000 providing good resolutions to confidence intervals.}

\item{\code{pval_epsilon}}{The bisection algorithm tolerance for the test inversion (applicable for test type "randomization-exact" only). 
The default is to find a CI accurate to within a tenth of a percent.}

\item{\code{B}}{Number of bootstrap samples for the survival response where \code{estimate_type} is "median_difference"
(see \link{\code{controlTest::quantileControlTest}}. The default is NULL which corresponds to B=501 
providing pvalue resolution to a fifth of a percent.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A 1 - alpha sized frequentist confidence interval for the treatment effect
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{seq_des = SeqDesign$new(n = 6, p = 10, design = "CRD")
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[1, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[2, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[3, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[4, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[5, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[6, 2 : 10])
seq_des$add_all_subject_responses(c(4.71, 1.23, 4.78, 6.11, 5.95, 8.43))

seq_des_inf = SeqDesignInference$new(seq_des, test_type = "MLE-or-KM-based")
seq_des_inf$compute_confidence_interval()
		
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeqDesignInference-compute_two_sided_pval_for_treatment_effect"></a>}}
\if{latex}{\out{\hypertarget{method-SeqDesignInference-compute_two_sided_pval_for_treatment_effect}{}}}
\subsection{Method \code{compute_two_sided_pval_for_treatment_effect()}}{
Computes a 2-sided p-value for all types of inferential settings written about in the initializer
(1) estimate type "mean_difference-or-medians" and test type "MLE-or-KM-based"
This implies the classic mean_difference estimator which means that 
  (a) For continous and proportion outcomes, H_0: E[Y_T] - E[Y_C] = delta,
  (b) For incidence outcomes, H_0: log(Odds(P(Y_T = 1)) - log(Odds(P(Y_C = 1) = delta,
  (c) For count outcomes, H_0: E[ln(Y_T)] - E[ln(Y_C)] = delta or
  (d) For survival outcomes, H_0: MED[Y_T] - MED[Y_C] = delta
(2) Fisher's randomization test which means that H_0: y_i_T - y_i_C = delta for all subjects
either the classic different-in-means estimate of the additive treatment effect, 
i.e. ybar_T - ybar_C or the default_regression estimate of the additive treatment effect linearly i.e. 
the treatment different adjusted linearly for the p covariates.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeqDesignInference$compute_two_sided_pval_for_treatment_effect(
  nsim_exact_test = 501,
  B = NULL,
  delta = 0
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{nsim_exact_test}}{The number of randomization vectors to use in the randomization test (ignored if \code{test_type}
is not "randomization-exact"). The default is 501 providing pvalue resolution to a fifth of a percent.}

\item{\code{B}}{Number of bootstrap samples for the survival response where \code{estimate_type} is "median_difference"
(see \link{\code{controlTest::quantileControlTest}}). The default is 501 providing pvalue resolution 
to a fifth of a percent.}

\item{\code{delta}}{The null difference to test against. For any treatment effect at all this is set to zero (the default).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The approximate frequentist p-value
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{seq_des = SeqDesign$new(n = 6, p = 10, design = "CRD")
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[1, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[2, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[3, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[4, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[5, 2 : 10])
seq_des$add_subject_to_experiment_and_assign(MASS::biopsy[6, 2 : 10])
seq_des$add_all_subject_responses(c(4.71, 1.23, 4.78, 6.11, 5.95, 8.43))

seq_des_inf = SeqDesignInference$new(seq_des)
seq_des_inf$compute_two_sided_pval_for_treatment_effect()
		
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeqDesignInference-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SeqDesignInference-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeqDesignInference$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
